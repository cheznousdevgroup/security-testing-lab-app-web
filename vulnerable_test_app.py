#!/usr/bin/env python3
"""
Application web intentionnellement vuln√©rable pour tester votre scanner
NE JAMAIS D√âPLOYER EN PRODUCTION !
"""

from flask import Flask, request, render_template_string, jsonify, make_response
import sqlite3
import os

app = Flask(__name__)

# Cr√©er une base de donn√©es vuln√©rable
def init_db():
    conn = sqlite3.connect('vulnerable.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users 
                 (id INTEGER PRIMARY KEY, username TEXT, password TEXT)''')
    c.execute("INSERT OR IGNORE INTO users VALUES (1, 'admin', 'admin')")
    c.execute("INSERT OR IGNORE INTO users VALUES (2, 'user', 'password')")
    conn.commit()
    conn.close()

init_db()

# Page d'accueil avec XSS
@app.route('/')
def home():
    search = request.args.get('search', '')
    name = request.args.get('name', '')
    # Vuln√©rabilit√© XSS intentionnelle
    return f'''
    <html>
    <head><title>App Vuln√©rable de Test</title></head>
    <body>
        <h1>Application de Test - Vuln√©rabilit√©s Intentionnelles</h1>
        <h2>Test XSS</h2>
        <form>
            Recherche: <input name="search" value="{search}">
            <button>Chercher</button>
        </form>
        <p>R√©sultat: {search}</p>
        
        <h2>Test SQL Injection</h2>
        <form action="/user">
            User ID: <input name="id" value="1">
            <button>Voir utilisateur</button>
        </form>
        
        <p>Bienvenue {name} !</p>
    </body>
    </html>
    '''

# Endpoint avec SQL Injection
@app.route('/user')
def user():
    user_id = request.args.get('id', '1')
    # Vuln√©rabilit√© SQL Injection intentionnelle
    conn = sqlite3.connect('vulnerable.db')
    c = conn.cursor()
    query = f"SELECT * FROM users WHERE id = {user_id}"  # DANGEREUX !
    
    try:
        result = c.execute(query).fetchone()
        if result:
            return f"<h1>Utilisateur: {result[1]}</h1><p>ID: {result[0]}</p>"
        else:
            return "<h1>Utilisateur non trouv√©</h1>"
    except Exception as e:
        # Affiche l'erreur SQL (mauvaise pratique)
        return f"<h1>Erreur SQL:</h1><pre>{str(e)}</pre>"
    finally:
        conn.close()

# Login vuln√©rable
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        
        conn = sqlite3.connect('vulnerable.db')
        c = conn.cursor()
        # Vuln√©rabilit√© SQL Injection dans le login
        query = f"SELECT * FROM users WHERE username='{username}' AND password='{password}'"
        
        try:
            result = c.execute(query).fetchone()
            if result:
                return "<h1>Connexion r√©ussie!</h1><p>Bienvenue admin!</p><a href='/admin'>Dashboard</a>"
            else:
                return "<h1>Login √©chou√©</h1><a href='/login'>R√©essayer</a>"
        except Exception as e:
            return f"<h1>Erreur:</h1><pre>{str(e)}</pre>"
        finally:
            conn.close()
    
    return '''
    <form method="post">
        <h1>Login</h1>
        Username: <input name="username"><br>
        Password: <input name="password" type="password"><br>
        <button>Se connecter</button>
    </form>
    '''

# Dashboard admin (authentification faible)
@app.route('/admin')
def admin():
    # Pas de v√©rification d'authentification !
    return '''
    <h1>Dashboard Admin</h1>
    <p>Zone sensible - Normalement prot√©g√©e!</p>
    <ul>
        <li>Utilisateurs: 1337</li>
        <li>Revenus: $999,999</li>
        <li>Donn√©es sensibles...</li>
    </ul>
    '''

# Directory traversal
@app.route('/file')
def file():
    filename = request.args.get('name', 'welcome.txt')
    # Vuln√©rabilit√© de travers√©e de r√©pertoire
    try:
        with open(filename, 'r') as f:
            content = f.read()
        return f"<pre>{content}</pre>"
    except:
        return "Fichier non trouv√©"

# Headers non s√©curis√©s
@app.after_request
def after_request(response):
    # CORS permissif (vuln√©rabilit√©)
    origin = request.headers.get('Origin')
    if origin:
        response.headers['Access-Control-Allow-Origin'] = origin
    
    # Pas de headers de s√©curit√© !
    # response.headers['X-Frame-Options'] = 'DENY'  # Comment√© expr√®s
    # response.headers['X-Content-Type-Options'] = 'nosniff'  # Comment√©
    
    return response

# Fichiers sensibles simul√©s
@app.route('/.env')
def env_file():
    # Simule un fichier .env expos√©
    return '''APP_NAME=VulnerableApp
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=vulnerable_db
DB_USERNAME=root
DB_PASSWORD=SuperSecret123!
API_KEY=sk-1234567890abcdef
SECRET_KEY=my-super-secret-key-12345'''

@app.route('/.git/config')
def git_config():
    # Simule un .git/config expos√©
    return '''[core]
    repositoryformatversion = 0
    filemode = true
[remote "origin"]
    url = https://github.com/company/internal-app.git
    fetch = +refs/heads/*:refs/remotes/origin/*'''

@app.route('/backup.sql')
def backup_sql():
    # Simule un backup SQL expos√©
    return '''-- MySQL dump
CREATE TABLE users (id INT, username VARCHAR(50), password VARCHAR(50));
INSERT INTO users VALUES (1, 'admin', 'admin123');
INSERT INTO users VALUES (2, 'root', 'toor');
INSERT INTO users VALUES (3, 'user', 'password');'''

@app.route('/phpinfo.php')
def phpinfo():
    # Simule phpinfo
    return '''<h1>PHP Info</h1>
    <table>
        <tr><td>PHP Version</td><td>7.4.3</td></tr>
        <tr><td>System</td><td>Linux vulnerable-server 5.4.0</td></tr>
        <tr><td>Server API</td><td>Apache 2.0</td></tr>
    </table>'''

# API endpoint vuln√©rable
@app.route('/api/user/<int:id>')
def api_user(id):
    conn = sqlite3.connect('vulnerable.db')
    c = conn.cursor()
    result = c.execute(f"SELECT * FROM users WHERE id = {id}").fetchone()
    conn.close()
    
    if result:
        # Expose trop d'informations
        return jsonify({
            'id': result[0],
            'username': result[1],
            'password': result[2],  # Ne jamais exposer les mots de passe !
            'status': 'success'
        })
    return jsonify({'error': 'User not found'}), 404

if __name__ == '__main__':
    print("\n" + "="*60)
    print("APPLICATION VULN√âRABLE DE TEST")
    print("="*60)
    print("‚ö†Ô∏è  ATTENTION: Cette application contient des vuln√©rabilit√©s")
    print("    intentionnelles pour tester votre scanner!")
    print("    NE JAMAIS UTILISER EN PRODUCTION!")
    print("="*60)
    print("\nVuln√©rabilit√©s incluses:")
    print("- SQL Injection (/user?id=1 et /login)")
    print("- XSS (/search?q=<script>)")
    print("- Directory Traversal (/file?name=../etc/passwd)")
    print("- Fichiers sensibles expos√©s (/.env, /.git/config, etc.)")
    print("- Authentification faible (admin:admin)")
    print("- CORS mal configur√©")
    print("- Headers de s√©curit√© manquants")
    print("\nüöÄ Serveur d√©marr√© sur http://localhost:5000")
    print("="*60 + "\n")
    
    app.run(debug=True, port=5000)